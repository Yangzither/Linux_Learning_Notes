The shell is the command line interpreter that translates commands entered by a user into actions to be performed by the operating system. 

*sysadmin@localhost:~$ 
sysadmin is the user name
localhost is the system name
~ indicate this is the home directory

*Linux is case-sensitive. Commands, options, arguments, variables, and file names must be entered exactly as shown.

*The typical format for a command is as follows:
command [options] [arguments]
Options are used to modify the core behavior of a command while arguments are used to provide additional information (such as a filename or a username). 
Each option and argument is normally separated by a space, although options can often be combined.

*ls -lr
  ls -l -r
  ls -rl
  
 *history
 !3 >> No 3 command from history list
 !-3
 !! >> most recent command
 !ls >> the last iteratino of this command
 
 ==========
 Variables
 //Local variable:  When the user closes a terminal window or shell, all of the variables are lost. 
 They are often associated with user-based tasks and are lowercase by convention.
 
 variable='something'
 echo $variable
 
 //Environment variables:
 Environment variables, also called global variables, are available system-wide, in all shells used by Bash when interpreting commands and performing tasks. 
 The system automatically recreates environment variables when a new shell is opened. 
 Examples include the PATH, HOME, and HISTSIZE variables. 
 
 Command:
 env >> show environment variables
 
 *How to make a local variable an environment variable:
 export variable1
 
 or create a variable environment upon its creation 
 export variable2="something else"
 
 *How to remove an exported variable
 unset variable2
 

 //Path variable 
 One of the most important Bash shell variables to understand is the PATH variable. 
 It contains a list that defines which directories the shell looks in to find commands. 
 If a valid command is entered and the shell returns a "command not found" error, it is because the Bash shell was unable to locate a command by that name in any of the directories included in the path. 
 The following command displays the path of the current shell:
 
 How to update the value of PATH
sysadmin@localhost:~$ PATH=/usr/bin/custom:$PATH                        
sysadmin@localhost:~$ echo $PATH                                       
/usr/bin/custom:/home/sysadmin/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games   
 
 ==========
 *Command types
 type command
 //internal commands:  built into shell intself, shell knows how to interprete it. 
 type cd
 
 //Exterenal command:
External commands are stored in files that are searched by the shell. If a user types the ls command, 
then the shell searches through the directories that are listed in the PATH variable to try to find a file named ls that it can execute
 
 which ls
 which cal
 
 for external command, "type" command display the location of the command 
 
//Using the -a option of the type command displays all locations that contain the command named:
sysadmin@localhost:~$ type -a echo                                      
echo is a shell builtin                                                
echo is /bin/echo
 
 //Alias: alias come from two places:initialization files and created in shell. When shell is closed, alias created within this shell will be lost 
 type -a ll
 use type command to identify all alias and locations 
 
 //Functions
 Functions can also be built using existing commands to either create new commands, or to override commands built-in to the shell or commands stored in files. Aliases and functions are normally loaded from the initialization files when the shell first starts.
 
==========
Quoating
//Double Quotes - Double quotes stop the shell from interpreting some metacharacters (special characters), including glob characters.
echo "The glob characters are *, ? and [ ]" 

//Single Quotes - Single quotes prevent the shell from doing any interpreting of special characters, including globs, variables, command substitution and other metacharacters that have not been discussed yet.

//Backslash character \  >> There is also an alternative technique to essentially single quote a single character.
sysadmin@localhost:~$ echo The service costs \$1 and the path is $PATH
The service costs $1 and the path is /usr/bin/custom:/home/sysadmin/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

Backqotes
Backquotes, or backticks, are used to specify a command within a command, a process called command substitution. 
This allows for powerful and sophisticated use of commands.
echo today is `date`
Today is Mon Nov 4 03:40:05 UTC 2018










